[project]
name = "nu-posix"
version = "0.1.0"
description = "A Rust tool to convert POSIX shell scripts to idiomatic Nushell syntax"
authors = ["Your Name <fredrick.eisele@gmail.com>"]
channels = ["conda-forge"]
platforms = ["linux-64", "osx-64", "osx-arm64", "win-64"]

[dependencies]
rust = ">=1.70"
python = ">=3.12"

# TASKS
[tasks.build]
cmd = "cargo build"
depends-on = ["full-clean"]

[tasks.test]
cmd = "cargo test"
depends-on = ["full-clean"]

[tasks.run]
cmd = "cargo run"
depends-on = ["full-clean"]

[tasks.check]
cmd = "cargo check"
depends-on = ["full-clean"]

[tasks.fmt]
cmd = "cargo fmt"
depends-on = ["full-clean"]

[tasks.clippy]
cmd = "cargo clippy"
depends-on = ["full-clean"]

[tasks.install]
cmd = "cargo install --path ."
depends-on = ["full-clean"]

[tasks.test-examples]
cmd = "cargo run --example yash_integration"
depends-on = ["full-clean"]

[tasks.release-build]
cmd = "cargo build --release"
depends-on = ["full-clean"]

[tasks.clean]
cmd = "cargo clean && rm -rf docs/output"
depends-on = ["full-clean"]

[tasks.register]
cmd = "nu -c 'plugin add ./target/debug/nu_plugin_posix'"
depends-on = ["build"]

[tasks.dev]
cmd = "nu -c 'plugin add ./target/debug/nu_plugin_posix; help from posix'"
depends-on = ["build"]

[tasks.interactive]
cmd = "nu -c 'plugin add ./target/debug/nu_plugin_posix' && nu"
depends-on = ["build"]

[tasks.demo]
cmd = "nu -c 'plugin add ./target/debug/nu_plugin_posix; echo \"ls -la\" | from posix'"
depends-on = ["build"]

[tasks.test-plugin]
cmd = "nu -c 'plugin add ./target/debug/nu_plugin_posix; echo \"for i in 1 2 3 do echo $i done\" | from posix'"
depends-on = ["build"]

[tasks.register-release]
cmd = "nu -c 'plugin add ./target/release/nu_plugin_posix'"
depends-on = ["release-build"]

# Enhanced development tasks
[tasks.watch]
cmd = "cargo watch -x 'build' -s 'nu -c \"plugin add ./target/debug/nu_plugin_posix\"'"

[tasks.quick-test]
cmd = "nu -c 'plugin add ./target/debug/nu_plugin_posix; echo \"echo hello world\" | from posix'"
depends-on = ["build"]

[tasks.test-pipeline]
cmd = "nu -c 'plugin add ./target/debug/nu_plugin_posix; echo \"ls | grep test\" | from posix'"
depends-on = ["build"]

[tasks.test-control-flow]
cmd = "nu -c 'plugin add ./target/debug/nu_plugin_posix; echo \"if [ -f file.txt ]; then echo exists; fi\" | from posix'"
depends-on = ["build"]

[tasks.test-loops]
cmd = "nu -c 'plugin add ./target/debug/nu_plugin_posix; echo \"for i in 1 2 3; do echo $i; done\" | from posix'"
depends-on = ["build"]

[tasks.test-pretty]
cmd = "nu -c 'plugin add ./target/debug/nu_plugin_posix; echo \"if true; then echo yes; fi\" | from posix --pretty'"
depends-on = ["build"]

# File-based testing
[tasks.test-sample]
cmd = "nu -c 'plugin add ./target/debug/nu_plugin_posix; from posix --file ./examples/sample.sh'"
depends-on = ["build"]

[tasks.test-sample-pretty]
cmd = "nu -c 'plugin add ./target/debug/nu_plugin_posix; from posix --file ./examples/sample.sh --pretty'"
depends-on = ["build"]

# Parser testing
[tasks.test-parser]
cmd = "nu -c 'plugin add ./target/debug/nu_plugin_posix; echo \"echo hello | wc -l\" | parse posix'"
depends-on = ["build"]

[tasks.test-ast]
cmd = "nu -c 'plugin add ./target/debug/nu_plugin_posix; echo \"for i in *.txt; do echo $i; done\" | parse posix'"
depends-on = ["build"]

# Conversion testing (experimental)
[tasks.test-to-posix]
cmd = "nu -c 'plugin add ./target/debug/nu_plugin_posix; echo \"print hello world\" | to posix'"
depends-on = ["build"]

# Release workflow
[tasks.release-all]
cmd = "nu -c 'plugin add ./target/release/nu_plugin_posix'"
depends-on = ["release-build"]

[tasks.release-test]
cmd = "nu -c 'plugin add ./target/release/nu_plugin_posix; echo \"ls -la\" | from posix'"
depends-on = ["release-build"]

[tasks.release-interactive]
cmd = "nu -c 'plugin add ./target/release/nu_plugin_posix' && nu"
depends-on = ["release-build"]

# Development helpers
[tasks.full-clean]
cmd = "cargo clean && rm -rf target && rm -rf docs/output"

[tasks.docs]
cmd = "cargo doc --open"
depends-on = ["full-clean"]

[tasks.build-guides]
cmd = "nu docs/build_guides.nu"
description = "Build developer and operator guides from AsciiDoc chapters"

[tasks.build-guides-html]
cmd = "nu docs/build_guides.nu"
description = "Build developer and operator guides and generate HTML output"

[tasks.build-guides-pdf]
cmd = "nu docs/build_guides.nu"
description = "Build developer and operator guides and generate PDF output"

[tasks.view-guides]
cmd = "xdg-open docs/output/developer-guide.html || open docs/output/developer-guide.html"
description = "Open the generated HTML developer guide in the default browser"
depends-on = ["build-guides-html"]

[tasks.view-guides-pdf]
cmd = "xdg-open docs/output/developer-guide.pdf || open docs/output/developer-guide.pdf"
description = "Open the generated PDF developer guide in the default viewer"
depends-on = ["build-guides-pdf"]

[tasks.docs-all]
depends-on = ["build-guides", "docs"]
description = "Build both the documentation guides and API docs"

[tasks.docs-all-pdf]
depends-on = ["build-guides-pdf", "docs"]
description = "Build both the documentation guides (with PDF) and API docs"

[tasks.clean-guides]
cmd = "nu docs/build_guides.nu --clean"
description = "Clean the generated documentation output directory"

[tasks.view-developer-guide]
cmd = "xdg-open docs/output/developer-guide.html || open docs/output/developer-guide.html"
description = "Open the developer guide in the default browser"
depends-on = ["build-guides-html"]

[tasks.view-operator-guide]
cmd = "xdg-open docs/output/operator-guide.html || open docs/output/operator-guide.html"
description = "Open the operator guide in the default browser"
depends-on = ["build-guides-html"]

[tasks.view-operator-guide-pdf]
cmd = "xdg-open docs/output/operator-guide.pdf || open docs/output/operator-guide.pdf"
description = "Open the operator guide PDF in the default viewer"
depends-on = ["build-guides-pdf"]

[tasks.view-developer-guide-pdf]
cmd = "xdg-open docs/output/developer-guide.pdf || open docs/output/developer-guide.pdf"
description = "Open the developer guide PDF in the default viewer"
depends-on = ["build-guides-pdf"]

[tasks.edit-developer-guide]
cmd = "code docs/developer-guide.adoc || vim docs/developer-guide.adoc"
description = "Edit the developer guide in your preferred editor"

[tasks.edit-operator-guide]
cmd = "code docs/operator-guide.adoc || vim docs/operator-guide.adoc"
description = "Edit the operator guide in your preferred editor"

[tasks.build-guides-html-only]
cmd = "nu docs/build_guides.nu --html"
description = "Build developer and operator guides (HTML only)"

[tasks.build-guides-pdf-only]
cmd = "nu docs/build_guides.nu --pdf"
description = "Build developer and operator guides (PDF only)"

[tasks.docs-help]
cmd = "nu docs/build_guides.nu --help"
description = "Show help for the documentation build system"

[tasks.bench]
cmd = "cargo bench"
depends-on = ["full-clean"]

[tasks.validate]
cmd = "nu --version && cargo --version && echo 'Environment validated'"
depends-on = ["full-clean"]

# Comprehensive workflow tasks
[tasks.dev-workflow]
depends-on = ["build", "test", "register", "quick-test"]

[tasks.ci-check]
depends-on = ["fmt", "clippy", "test"]

[tasks.pre-commit]
depends-on = ["ci-check", "demo"]

# Interactive development sessions
[tasks.dev-session]
cmd = "nu -c 'plugin add ./target/debug/nu_plugin_posix; print \"nu-posix plugin loaded! Try: echo \\\"ls -la\\\" | from posix\"'"
depends-on = ["build"]

[tasks.test-session]
cmd = "nu -c 'plugin add ./target/debug/nu_plugin_posix; print \"Test commands:\"; print \"  echo \\\"ls | grep test\\\" | from posix\"; print \"  echo \\\"if true; then echo yes; fi\\\" | from posix --pretty\"; print \"  from posix --file ./examples/sample.sh\"'"
depends-on = ["build"]

# AST Analysis Tasks
[tasks.show-ast]
cmd = "nu -c 'plugin add ./target/debug/nu_plugin_posix; let script = \"$SCRIPT\"; print \"=== POSIX Script ===\"; print $script; print \"\\n=== AST Structure ===\"; echo $script | parse posix | to json --indent 2'"
depends-on = ["build"]
env = { SCRIPT = "echo hello world" }

[tasks.show-ast-file]
cmd = "nu -c 'plugin add ./target/debug/nu_plugin_posix; print \"=== Sample Script AST ===\"; open ./examples/sample.sh | str trim | parse posix | to json --indent 2'"
depends-on = ["build"]

[tasks.show-ast-table]
cmd = "nu -c 'plugin add ./target/debug/nu_plugin_posix; echo \"$SCRIPT\" | parse posix | get commands | table --expand'"
depends-on = ["build"]
env = { SCRIPT = "ls -la | grep test" }

[tasks.ast-compare]
cmd = "nu -c 'plugin add ./target/debug/nu_plugin_posix; let script = \"$SCRIPT\"; print \"=== Original POSIX ===\"; print $script; print \"\\n=== Parsed AST ===\"; echo $script | parse posix | to json --indent 2; print \"\\n=== Converted Nu ===\"; echo $script | from posix --pretty'"
depends-on = ["build"]
env = { SCRIPT = "if [ -f test.txt ]; then cat test.txt | grep hello; fi" }

[tasks.ast-analyze]
cmd = "nu -c 'plugin add ./target/debug/nu_plugin_posix; let script = \"$SCRIPT\"; let ast = (echo $script | parse posix); print \"=== POSIX to Nu Analysis ===\"; print $\"Input: ($script)\"; print $\"Commands: (($ast | get commands | length) commands)\"; print \"\\n=== Command Types ===\"; $ast | get commands | group-by type | transpose key count | table; print \"\\n=== Full AST ===\"; $ast | to json --indent 2; print \"\\n=== Converted Nu ===\"; echo $script | from posix --pretty'"
depends-on = ["build"]
env = { SCRIPT = "ls | grep test | head -5" }

[tasks.ast-explorer]
cmd = "nu -c 'plugin add ./target/debug/nu_plugin_posix; print \"üîç AST Explorer - Available commands:\"; print \"\\nüìä Basic Analysis:\"; print \"  pixi run show-ast SCRIPT=\\\"your_script_here\\\"\"; print \"  pixi run show-ast-file\"; print \"  pixi run show-ast-table SCRIPT=\\\"your_script_here\\\"\"; print \"  pixi run ast-compare SCRIPT=\\\"your_script_here\\\"\"; print \"  pixi run ast-analyze SCRIPT=\\\"your_script_here\\\"\"; print \"\\nüéØ Advanced Analysis:\"; print \"  pixi run ast-demo SCRIPT=\\\"your_script_here\\\" FORMAT=json\"; print \"  pixi run ast-demo SCRIPT=\\\"your_script_here\\\" FORMAT=table\"; print \"  pixi run ast-demo SCRIPT=\\\"your_script_here\\\" FORMAT=summary\"; print \"  pixi run ast-demo-file\"; print \"  pixi run ast-demo-examples\"; print \"  pixi run ast-full-analysis SCRIPT=\\\"your_script_here\\\"\"; print \"\\nüîß Specialized:\"; print \"  pixi run ast-pipeline\"; print \"  pixi run ast-conditional\"; print \"  pixi run ast-loop\"; print \"\\nüìù Examples:\"; print \"  pixi run ast-demo SCRIPT=\\\"ls -la | grep test\\\" FORMAT=summary\"; print \"  pixi run ast-full-analysis SCRIPT=\\\"if [ -f test ]; then echo yes; fi\\\"\"; print \"  pixi run ast-demo-file\"; print \"  pixi run ast-demo-examples\"'"
depends-on = ["build"]

# Specialized AST Tasks
[tasks.ast-pipeline]
cmd = "nu -c 'plugin add ./target/debug/nu_plugin_posix; echo \"ls | grep test | wc -l\" | parse posix | get commands | table --expand'"
depends-on = ["build"]

[tasks.ast-conditional]
cmd = "nu -c 'plugin add ./target/debug/nu_plugin_posix; echo \"if [ -f file.txt ]; then echo exists; fi\" | parse posix | get commands | table --expand'"
depends-on = ["build"]

[tasks.ast-loop]
cmd = "nu -c 'plugin add ./target/debug/nu_plugin_posix; echo \"for i in 1 2 3; do echo $i; done\" | parse posix | get commands | table --expand'"
depends-on = ["build"]

# Comprehensive AST Analysis with Custom Script
[tasks.ast-demo]
cmd = "nu -c 'plugin add ./target/debug/nu_plugin_posix; use ./scripts/ast-demo.nu; ast-demo \"$SCRIPT\" --format $FORMAT'"
depends-on = ["build"]
env = { SCRIPT = "ls -la | grep test", FORMAT = "summary" }

[tasks.ast-demo-file]
cmd = "nu -c 'plugin add ./target/debug/nu_plugin_posix; use ./scripts/ast-demo.nu; ast-demo --file ./examples/sample.sh --format summary'"
depends-on = ["build"]

[tasks.ast-demo-examples]
cmd = "nu -c 'plugin add ./target/debug/nu_plugin_posix; use ./scripts/ast-demo.nu; ast-demo --examples'"
depends-on = ["build"]

[tasks.ast-full-analysis]
cmd = "nu -c 'plugin add ./target/debug/nu_plugin_posix; use ./scripts/ast-demo.nu; print \"=== JSON Analysis ===\"; ast-demo \"$SCRIPT\" --format json; print \"\\n=== Table Analysis ===\"; ast-demo \"$SCRIPT\" --format table; print \"\\n=== Summary Analysis ===\"; ast-demo \"$SCRIPT\" --format summary'"
depends-on = ["build"]
env = { SCRIPT = "if [ -f test.txt ]; then cat test.txt | grep hello | head -5; else echo not found; fi" }

# Complete AST demonstration workflow
[tasks.ast-showcase]
cmd = "nu -c 'plugin add ./target/debug/nu_plugin_posix; use ./scripts/ast-demo.nu; print \"üéØ nu-posix AST Analysis Showcase\"; print \"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\"; print \"\\n1. Simple Command Analysis:\"; ast-demo \"echo hello world\" --format summary; print \"\\n2. Pipeline Analysis:\"; ast-demo \"ls -la | grep test | head -5\" --format table; print \"\\n3. Conditional Analysis:\"; ast-demo \"if [ -f test.txt ]; then cat test.txt; fi\" --format json; print \"\\n4. Loop Analysis:\"; ast-demo \"for i in 1 2 3; do echo $i; done\" --format summary; print \"\\n5. Sample File Analysis:\"; ast-demo --file ./examples/sample.sh --format summary; print \"\\n‚úÖ AST Analysis Complete! Use pixi run ast-explorer for more options.\"'"
depends-on = ["build"]

[feature.dev.dependencies]
# rust-analyzer = "*"

[environments]
dev = ["dev"]
